<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Output\Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Output\Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6190004: Last Updated: Tue Oct 10 12:27:41 2023
<BR><P>
<H3>Maximum Stack Usage =        156 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
USB_IRQHandler &rArr; USBD_IRQHandler &rArr; usbd_event_ep0_setup_complete_handler &rArr; usbd_setup_request_handler &rArr; usbd_ep_open
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[14]">ADC_COMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">ADC_COMP_IRQHandler</a><BR>
 <LI><a href="#[4]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">HardFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[14]">ADC_COMP_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[26]">CAN_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[11]">DMA1_Channel1_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[12]">DMA1_Channel2_3_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[13]">DMA1_Channel4_5_6_7_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[d]">EXTI0_1_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[e]">EXTI2_3_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[f]">EXTI4_15_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[b]">FLASH_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[4]">HardFault_Handler</a> from py32f072_it.o(.text.HardFault_Handler) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[1f]">I2C1_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[20]">I2C2_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[10]">LCD_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[3]">NMI_Handler</a> from py32f072_it.o(.text.NMI_Handler) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[9]">PVD_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[6]">PendSV_Handler</a> from py32f072_it.o(.text.PendSV_Handler) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[c]">RCC_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[a]">RTC_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[2]">Reset_Handler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[21]">SPI1_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[22]">SPI2_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[5]">SVC_Handler</a> from py32f072_it.o(.text.SVC_Handler) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[7]">SysTick_Handler</a> from py32f072_it.o(.text.SysTick_Handler) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[29]">SystemInit</a> from system_py32f072.o(.text.SystemInit) referenced from startup_py32f072xx.o(.text)
 <LI><a href="#[1b]">TIM14_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[1c]">TIM15_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[1d]">TIM16_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[1e]">TIM17_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[15]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[16]">TIM1_CC_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[17]">TIM2_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[18]">TIM3_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[19]">TIM6_LPTIM1_DAC_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[1a]">TIM7_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[23]">USART1_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[24]">USART2_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[25]">USART3_4_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[27]">USB_IRQHandler</a> from py32f072_it.o(.text.USB_IRQHandler) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[8]">WWDG_IRQHandler</a> from startup_py32f072xx.o(.text) referenced from startup_py32f072xx.o(RESET)
 <LI><a href="#[2a]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_py32f072xx.o(.text)
 <LI><a href="#[2c]">cdc_acm_class_interface_request_handler</a> from usbd_cdc.o(.text.cdc_acm_class_interface_request_handler) referenced from usbd_cdc.o(.text.usbd_cdc_acm_init_intf)
 <LI><a href="#[2b]">cdc_notify_handler</a> from usbd_cdc.o(.text.cdc_notify_handler) referenced from usbd_cdc.o(.text.usbd_cdc_acm_init_intf)
 <LI><a href="#[28]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[0]">usbd_cdc_acm_bulk_in</a> from usbd_cdc_if.o(.text.usbd_cdc_acm_bulk_in) referenced 2 times from usbd_cdc_if.o(.data.cdc_in_ep)
 <LI><a href="#[1]">usbd_cdc_acm_bulk_out</a> from usbd_cdc_if.o(.text.usbd_cdc_acm_bulk_out) referenced 2 times from usbd_cdc_if.o(.data.cdc_out_ep)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2a]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(.text)
</UL>
<P><STRONG><a name="[5e]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[2d]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[32]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[5f]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[60]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[61]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[62]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[63]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[2]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>ADC_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_COMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_COMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>DMA1_Channel4_5_6_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIM6_LPTIM1_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>USART3_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_class_interface_request_handler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep0_setup_complete_handler
</UL>

<P><STRONG><a name="[64]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[30]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_data_send_with_dtr_test
</UL>

<P><STRONG><a name="[66]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[52]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[40]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[31]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[38]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, uidiv_div0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_uidivmod</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, uidiv_div0.o(.text), UNUSED)

<P><STRONG><a name="[2e]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[69]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[33]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, py32f072_hal.o(.text.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[34]"></a>HAL_GetTick</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, py32f072_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[3e]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, py32f072_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[35]"></a>HAL_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, py32f072_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[36]"></a>HAL_InitTick</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, py32f072_hal.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[37]"></a>HAL_MspInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, py32f072_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[3a]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, py32f072_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[3b]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, py32f072_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, py32f072_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[3d]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1116 bytes, Stack size 40 bytes, py32f072_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[39]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, py32f072_hal_cortex.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[4]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, py32f072_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, py32f072_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, py32f072_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, py32f072_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, py32f072_it.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>SystemInit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, system_py32f072.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(.text)
</UL>
<P><STRONG><a name="[3f]"></a>USBD_IRQHandler</STRONG> (Thumb, 720 bytes, Stack size 48 bytes, usb_dc_py32.o(.text.USBD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBD_IRQHandler &rArr; usbd_event_ep0_setup_complete_handler &rArr; usbd_setup_request_handler &rArr; usbd_ep_open
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep_out_complete_handler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep_in_complete_handler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep0_setup_complete_handler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_reset_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>

<P><STRONG><a name="[27]"></a>USB_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, py32f072_it.o(.text.USB_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = USB_IRQHandler &rArr; USBD_IRQHandler &rArr; usbd_event_ep0_setup_complete_handler &rArr; usbd_setup_request_handler &rArr; usbd_ep_open
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f072xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>cdc_acm_data_send_with_dtr_test</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, usbd_cdc_if.o(.text.cdc_acm_data_send_with_dtr_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cdc_acm_data_send_with_dtr_test &rArr; usbd_ep_start_write
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_write
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4c]"></a>cdc_acm_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usbd_cdc_if.o(.text.cdc_acm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cdc_acm_init &rArr; usbd_initialize &rArr; usb_dc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_initialize
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_add_endpoint
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_add_interface
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_cdc_acm_init_intf
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_desc_register
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[28]"></a>main</STRONG> (Thumb, 164 bytes, Stack size 64 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = main &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_data_send_with_dtr_test
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_init
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[53]"></a>usb_dc_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usb_dc_py32.o(.text.usb_dc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_dc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_dc_low_level_init
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_initialize
</UL>

<P><STRONG><a name="[54]"></a>usb_dc_low_level_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_dc_py32.o(.text.usb_dc_low_level_init))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_dc_init
</UL>

<P><STRONG><a name="[50]"></a>usbd_add_endpoint</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usbd_core.o(.text.usbd_add_endpoint))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_init
</UL>

<P><STRONG><a name="[4f]"></a>usbd_add_interface</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usbd_core.o(.text.usbd_add_interface))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_add_interface
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_init
</UL>

<P><STRONG><a name="[0]"></a>usbd_cdc_acm_bulk_in</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_cdc_if.o(.text.usbd_cdc_acm_bulk_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = usbd_cdc_acm_bulk_in &rArr; usbd_ep_start_write
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_if.o(.data.cdc_in_ep)
</UL>
<P><STRONG><a name="[1]"></a>usbd_cdc_acm_bulk_out</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_cdc_if.o(.text.usbd_cdc_acm_bulk_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = usbd_cdc_acm_bulk_out &rArr; usbd_ep_start_read
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_if.o(.data.cdc_out_ep)
</UL>
<P><STRONG><a name="[49]"></a>usbd_cdc_acm_get_line_coding</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usbd_cdc.o(.text.usbd_cdc_acm_get_line_coding))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_class_interface_request_handler
</UL>

<P><STRONG><a name="[4e]"></a>usbd_cdc_acm_init_intf</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbd_cdc.o(.text.usbd_cdc_acm_init_intf))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_init
</UL>

<P><STRONG><a name="[47]"></a>usbd_cdc_acm_set_dtr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_cdc_if.o(.text.usbd_cdc_acm_set_dtr))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_class_interface_request_handler
</UL>

<P><STRONG><a name="[46]"></a>usbd_cdc_acm_set_line_coding</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_cdc.o(.text.usbd_cdc_acm_set_line_coding))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_class_interface_request_handler
</UL>

<P><STRONG><a name="[48]"></a>usbd_cdc_acm_set_rts</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_cdc.o(.text.usbd_cdc_acm_set_rts))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_class_interface_request_handler
</UL>

<P><STRONG><a name="[56]"></a>usbd_configure_done_callback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_cdc_if.o(.text.usbd_configure_done_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = usbd_configure_done_callback &rArr; usbd_ep_start_read
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_read
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_request_handler
</UL>

<P><STRONG><a name="[4d]"></a>usbd_desc_register</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbd_core.o(.text.usbd_desc_register))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_init
</UL>

<P><STRONG><a name="[5d]"></a>usbd_ep_clear_stall</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, usb_dc_py32.o(.text.usbd_ep_clear_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_ep_clear_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_request_handler
</UL>

<P><STRONG><a name="[5c]"></a>usbd_ep_close</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usb_dc_py32.o(.text.usbd_ep_close))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_request_handler
</UL>

<P><STRONG><a name="[5b]"></a>usbd_ep_is_stalled</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usb_dc_py32.o(.text.usbd_ep_is_stalled))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_ep_is_stalled
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_request_handler
</UL>

<P><STRONG><a name="[5a]"></a>usbd_ep_open</STRONG> (Thumb, 248 bytes, Stack size 28 bytes, usb_dc_py32.o(.text.usbd_ep_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = usbd_ep_open
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_reset_handler
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_request_handler
</UL>

<P><STRONG><a name="[57]"></a>usbd_ep_set_stall</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, usb_dc_py32.o(.text.usbd_ep_set_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_ep_set_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep_out_complete_handler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep0_setup_complete_handler
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_request_handler
</UL>

<P><STRONG><a name="[55]"></a>usbd_ep_start_read</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, usb_dc_py32.o(.text.usbd_ep_start_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usbd_ep_start_read
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep_out_complete_handler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep_in_complete_handler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep0_setup_complete_handler
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_cdc_acm_bulk_out
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_configure_done_callback
</UL>

<P><STRONG><a name="[4b]"></a>usbd_ep_start_write</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, usb_dc_py32.o(.text.usbd_ep_start_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = usbd_ep_start_write
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep_out_complete_handler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep_in_complete_handler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep0_setup_complete_handler
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_cdc_acm_bulk_in
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_data_send_with_dtr_test
</UL>

<P><STRONG><a name="[44]"></a>usbd_event_ep0_setup_complete_handler</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, usbd_core.o(.text.usbd_event_ep0_setup_complete_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = usbd_event_ep0_setup_complete_handler &rArr; usbd_setup_request_handler &rArr; usbd_ep_open
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_set_stall
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_request_handler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_write
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_read
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[43]"></a>usbd_event_ep_in_complete_handler</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, usbd_core.o(.text.usbd_event_ep_in_complete_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = usbd_event_ep_in_complete_handler &rArr; usbd_ep_start_write
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_write
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_read
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[42]"></a>usbd_event_ep_out_complete_handler</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, usbd_core.o(.text.usbd_event_ep_out_complete_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = usbd_event_ep_out_complete_handler &rArr; usbd_setup_request_handler &rArr; usbd_ep_open
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_set_stall
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_request_handler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_write
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_start_read
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[41]"></a>usbd_event_reset_handler</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, usbd_core.o(.text.usbd_event_reset_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = usbd_event_reset_handler &rArr; usbd_ep_open
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_open
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_address
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[51]"></a>usbd_initialize</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbd_core.o(.text.usbd_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_initialize &rArr; usb_dc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_dc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_acm_init
</UL>

<P><STRONG><a name="[59]"></a>usbd_set_address</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_dc_py32.o(.text.usbd_set_address))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_reset_handler
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_request_handler
</UL>

<P><STRONG><a name="[6c]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[6d]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[6e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[58]"></a>usbd_setup_request_handler</STRONG> (Thumb, 1212 bytes, Stack size 56 bytes, usbd_core.o(.text.usbd_setup_request_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = usbd_setup_request_handler &rArr; usbd_ep_open
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_clear_stall
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_close
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_is_stalled
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_set_stall
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_open
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_set_address
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_configure_done_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep_out_complete_handler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_event_ep0_setup_complete_handler
</UL>

<P><STRONG><a name="[2b]"></a>cdc_notify_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_cdc.o(.text.cdc_notify_handler))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.text.usbd_cdc_acm_init_intf)
</UL>
<P><STRONG><a name="[2c]"></a>cdc_acm_class_interface_request_handler</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, usbd_cdc.o(.text.cdc_acm_class_interface_request_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cdc_acm_class_interface_request_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_cdc_acm_get_line_coding
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_cdc_acm_set_rts
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_cdc_acm_set_line_coding
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_cdc_acm_set_dtr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.text.usbd_cdc_acm_init_intf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
